WARC/1.0
WARC-Type: response
WARC-Date: 2012-03-16T05:33:46Z
WARC-TREC-ID: clueweb12-0917wb-00-29101
WARC-Target-URI: http://pine.cs.yale.edu/pinewiki/ShortestPath
WARC-Payload-Digest: sha1:SJNSHZIYGR5YCIBZRVKQGT63J6AI5DFQ
WARC-IP-Address: 128.36.229.174
WARC-Record-ID: <urn:uuid:a3335fa8-fd19-4457-8a51-83817ffdc83e>
Content-Type: application/http; msgtype=response
Content-Length: 116802

HTTP/1.1 200 OK
Date: Fri, 16 Mar 2012 05:33:48 GMT
Server: Apache/2.2.21 (Unix) mod_ssl/2.2.21 OpenSSL/0.9.8r DAV/2 mod_fastcgi/2.4.2 SVN/1.6.17
Vary: Cookie,User-Agent,Accept-Language
Connection: close
Content-Type: text/html; charset=utf-8

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<meta name="robots" content="index,nofollow">

<title>ShortestPath - Pinewiki</title>
<script type="text/javascript" src="/moin_static194/common/js/common.js"></script>

<script type="text/javascript">
<!--
var search_hint = "Search";
//-->
</script>


<link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/moin_static194/modernized/css/common.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="/moin_static194/modernized/css/screen.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="print" href="/moin_static194/modernized/css/print.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="projection" href="/moin_static194/modernized/css/projection.css">

<!-- css only for MS IE6/IE7 browsers -->
<!--[if lt IE 8]>
   <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/moin_static194/modernized/css/msie.css">
<![endif]-->





<link rel="Start" href="/pinewiki/FrontPage">
<link rel="Alternate" title="Wiki Markup" href="/pinewiki/ShortestPath?action=raw">
<link rel="Alternate" media="print" title="Print View" href="/pinewiki/ShortestPath?action=print">
<link rel="Appendix" title="Makefile" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=Makefile">
<link rel="Appendix" title="dijkstra.c" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=dijkstra.c">
<link rel="Appendix" title="dijkstra.h" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=dijkstra.h">
<link rel="Appendix" title="dijkstra.png" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=dijkstra.png">
<link rel="Appendix" title="graph.c" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=graph.c">
<link rel="Appendix" title="graph.h" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=graph.h">
<link rel="Appendix" title="pq.c" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=pq.c">
<link rel="Appendix" title="pq.h" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=pq.h">
<link rel="Appendix" title="shortest_path.c" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=shortest_path.c">
<link rel="Appendix" title="shortest_path.h" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=shortest_path.h">
<link rel="Appendix" title="test_shortest_path.c" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=test_shortest_path.c">
<link rel="Search" href="/pinewiki/FindPage">
<link rel="Index" href="/pinewiki/TitleIndex">
<link rel="Glossary" href="/pinewiki/WordIndex">
<link rel="Help" href="/pinewiki/HelpOnFormatting">
</head>

<body  lang="en" dir="ltr">

<div id="header">

<form id="searchform" method="get" action="/pinewiki/ShortestPath">
<div>
<input type="hidden" name="action" value="fullsearch">
<input type="hidden" name="context" value="180">
<label for="searchinput">Search:</label>
<input id="searchinput" type="text" name="value" value="" size="20"
    onfocus="searchFocus(this)" onblur="searchBlur(this)"
    onkeyup="searchChange(this)" onchange="searchChange(this)" alt="Search">
<input id="titlesearch" name="titlesearch" type="submit"
    value="Titles" alt="Search Titles">
<input id="fullsearch" name="fullsearch" type="submit"
    value="Text" alt="Search Full Text">
</div>
</form>
<script type="text/javascript">
<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->
</script>

<div id="logo"><a href="/pinewiki/FrontPage"><img src="http://pine.cs.yale.edu/small-adversary.png" alt="PineWiki">PineWiki</a></div>
<div id="username"><a href="/pinewiki/ShortestPath?action=login" id="login" rel="nofollow">Login</a></div>
<h1 id="locationline">

<span id="pagelocation"><a class="backlink" href="/pinewiki/ShortestPath?action=fullsearch&amp;value=linkto%3A%22ShortestPath%22&amp;context=180" rel="nofollow" title="Click to do a full-text search for this title">ShortestPath</a></span>
</h1>


<ul id="navibar">
<li class="wikilink"><a href="/pinewiki/CS223">CS223</a></li><li class="wikilink"><a href="/pinewiki/CS469">CS469</a></li><li class="wikilink"><a href="/pinewiki/RecentChanges">RecentChanges</a></li><li class="wikilink"><a href="/pinewiki/FindPage">FindPage</a></li><li class="wikilink"><a href="/pinewiki/HelpContents">HelpContents</a></li><li class="current"><a href="/pinewiki/ShortestPath">ShortestPath</a></li>
</ul>

<div id="pageline"><hr style="display:none;"></div>

<ul class="editbar"><li><span class="disabled">Immutable Page</span></li><li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onClick="toggleComments();return false;">Comments</a></li><li><a class="nbinfo" href="/pinewiki/ShortestPath?action=info" rel="nofollow">Info</a></li><li><a class="nbattachments" href="/pinewiki/ShortestPath?action=AttachFile" rel="nofollow">Attachments</a></li><li>
<form class="actionsmenu" method="GET" action="/pinewiki/ShortestPath">
<div>
    <label>More Actions:</label>
    <select name="action"
        onchange="if ((this.selectedIndex != 0) &&
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="raw">Raw Text</option>
<option value="print">Print View</option>
<option value="refresh">Delete Cache</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SpellCheck">Check Spelling</option>
<option value="LikePages">Like Pages</option>
<option value="LocalSiteMap">Local Site Map</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="RenamePage" disabled class="disabled">Rename Page</option>
<option value="DeletePage" disabled class="disabled">Delete Page</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Subscribe User</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Remove Spam</option>
<option value="show" disabled class="disabled">Revert to this revision</option>
<option value="PackagePages">Package Pages</option>
<option value="SyncPages">Sync Pages</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="Load">Load</option>
<option value="Save">Save</option>
<option value="SlideShow">SlideShow</option>
    </select>
    <input type="submit" value="Do">
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script>
</form>
</li></ul>

</div>

<div id="page" lang="en" dir="ltr">
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><p class="line862">The <strong>shortest path problem</strong> is to find a path in a graph with given edge weights that has the minimum total weight.  Typically the graph is directed, so that the weight w<sub>uv</sub> of an edge uv may differ from the weight w<sub>vu</sub> of vu; in the case of an undirected graph, we can always turn it into a directed graph by replacing each undirected edge with two directed edges with the same weight that go in opposite directions.  We will use the terms <em>weight</em> and <em>length</em> interchangeably, and use <em>distance</em> for the minimum total path weight between two nodes, even when the weights don't make sense as lengths (for example, when some are negative). <span class="anchor" id="line-2"></span><span class="anchor" id="line-3"></span><p class="line874">There are two main variants to the problem: <span class="anchor" id="line-4"></span><span class="anchor" id="line-5"></span><ul><li><p class="line862">The <strong>single-source</strong> shortest path problem is to compute the distance from some source node <em>s</em> to every other node in the graph.  This variant includes the case where what we really want is just the distance from <em>s</em> to some target node <em>t</em>. <span class="anchor" id="line-6"></span></li><li><p class="line862">The <strong>all-pairs</strong> shortest path problem is to compute the distance between every pair of nodes in the graph.  This can be solved by running a single-source algorithm once for each starting vertex, but it can be solved more efficiently by combining the work for different starting vertices. <span class="anchor" id="line-7"></span><span class="anchor" id="line-8"></span></li></ul><p class="line874">There are also two different assumptions about the edge weights that can radically change the nature of the problem: <span class="anchor" id="line-9"></span><span class="anchor" id="line-10"></span><ul><li><p class="line891"><strong>All edge weights are non-negative.</strong>  This is the natural case where edge weights represent distances, and allows a fast greedy solution for the single-source case. <span class="anchor" id="line-11"></span></li><li><p class="line891"><strong>Edge weights are arbitrary.</strong>  This case typically arises when the edge weights represent the net cost of traversing some edge, which may be negative for profitable edges.  Now greedy solutions fail; even though it may be very expensive to get to some distant node u, if there is a good enough edge leaving u you can make up all the costs by taking it.  Shortest paths with negative edge weights are typically found by algorithms using techniques related to <a href="/pinewiki/DynamicProgramming">DynamicProgramming</a>. <span class="anchor" id="line-12"></span><span class="anchor" id="line-13"></span></li></ul><p class="line867">
<h1 id="Single-source_shortest_paths">1. Single-source shortest paths</h1>
<span class="anchor" id="line-14"></span><span class="anchor" id="line-15"></span><p class="line862">In the single-source shortest path problem, we want to compute the distance δ(s,t) from a single source node s to <em>every</em> target node t.  (As a side effect, we might like to find the actual shortest path, but usually this can be done easily while we are computing the distances.)  There are many algorithms for solving this problem, but most are based on the same technique, known as <em>relaxation</em>. <span class="anchor" id="line-16"></span><span class="anchor" id="line-17"></span><p class="line867">
<h2 id="Relaxation">1.1. Relaxation</h2>
<span class="anchor" id="line-18"></span><span class="anchor" id="line-19"></span><p class="line862">In general, a <strong>relaxation</strong> of an optimization problem is a new problem that replaces equality constraints in the original problem, like <span class="anchor" id="line-20"></span><span class="anchor" id="line-21"></span><ul><li style="list-style-type:none"><p class="line862">δ(s,t) = min<sub>u</sub> δ(s,u) + w<sub>ut</sub> <span class="anchor" id="line-22"></span><span class="anchor" id="line-23"></span></li></ul><p class="line874">with an inequality constraint, like <span class="anchor" id="line-24"></span><span class="anchor" id="line-25"></span><ul><li style="list-style-type:none"><p class="line862">d(s,t) ≥ min<sub>u</sub> d(s,u) + w<sub>ut</sub>. <span class="anchor" id="line-26"></span><span class="anchor" id="line-27"></span></li></ul><p class="line874">When we do this kind of replacement, we are also replacing the exact distances δ(s,t) with upper bounds d(s,t), and guaranteeing that d(s,t) is always greater than the correct answer δ(s,t). <span class="anchor" id="line-28"></span><span class="anchor" id="line-29"></span><p class="line862">The reason for relaxing a problem is that we can start off with very high upper bounds and lower them incrementally until they settle on the correct answer.  For shortest paths this is done by setting d(s,t) initially to zero when t=s and +∞ when t≠s (this choice doesn't require looking at the graph).  We then proceed to lower the d(s,t) bounds by a sequence of <em>edge relaxations</em> (a different use of the same term), where relaxing an edge uv sets the upper bound on the distance to v to the minimum of the old upper bound and the upper bound that we get by looking at a path through u, i.e. <span class="anchor" id="line-30"></span><span class="anchor" id="line-31"></span><ul><li style="list-style-type:none"><p class="line862">d'(s,v) := min(d(s,v), d(s,u) + w<sub>uv</sub>). <span class="anchor" id="line-32"></span><span class="anchor" id="line-33"></span></li></ul><p class="line874">It is easy to see that if d(s,v) ≥ δ(s,v) and d(s,u) ≥ δ(s,u), then it will also be the case that d'(s,v) ≥ δ(s,v). <span class="anchor" id="line-34"></span><span class="anchor" id="line-35"></span><p class="line862">What is less obvious is that performing an edge relaxation on every edge in some shortest s-t path <em>in order</em> starting from the initial state of the d array will set d(s,t) to exactly δ(s,t), even if other relaxation operations occur in between.  The proof is by induction on the number of edges in the path.  With zero edges, d(s,t) = δ(s,t) = 0.  With k+1 edges, the induction hypothesis says that d(s,u) = δ(s,u) after the first k relaxations, where u is the second-to-last vertex in the path.  But then the last relaxation sets d(s,t) ≤ δ(s,u) + w<sub>ut</sub>, which is the length of the shortest path and thus equals δ(s,t). <span class="anchor" id="line-36"></span><span class="anchor" id="line-37"></span><p class="line862">We mentioned earlier that it is possible to compute the actual shortest paths as a side-effect of computing the distances.  This is done using relaxation by keeping track of a previous-vertex pointer p[v] for each vertex, so that the shortest path is found by following all the previous-vertex pointers and reversing the sequence.  Initially, p[v] = NULL for all v; when relaxing an edge uv, it is set to u just in case d(s,u) + w<sub>uv</sub> is less than the previously computed distance d(s,v).  So in addition to getting the correct distances by relaxing all edges on the shortest path in order, we also find the shortest path. <span class="anchor" id="line-38"></span><span class="anchor" id="line-39"></span><p class="line874">This raises the issue of how to relax all the edges on the shortest path in order if we don't know what the shortest path is.  There are two ways to do this, depending on whether the graph contains negative-weight edges. <span class="anchor" id="line-40"></span><span class="anchor" id="line-41"></span><p class="line867">
<h2 id="Dijkstra.27s_algorithm">1.2. Dijkstra's algorithm</h2>
<span class="anchor" id="line-42"></span><span class="anchor" id="line-43"></span><p class="line862">If the graph contains no negative-weight edges, we can apply the <a href="/pinewiki/GreedyMethod">GreedyMethod</a>, relaxing at each step all the outgoing edges from the apparently closest vertex v that hasn't been processed yet; if this is in fact the closest vertex, we process all vertices in order of increasing distance and thus relax the edges of each shortest path in order.  This method gives Dijkstra's algorithm for single-source shortest paths, one of the best and simplest algorithms for the problem.  It requires a priority queue Q that provides an EXTRACT-MIN operation that deletes and returns the element v with smallest key, in this case the upper bound d(s,v) on the distance. <span class="anchor" id="line-44"></span><span class="anchor" id="line-45"></span><p class="line867"><span class="anchor" id="line-46"></span><span class="anchor" id="line-47"></span><span class="anchor" id="line-48"></span><span class="anchor" id="line-49"></span><span class="anchor" id="line-50"></span><span class="anchor" id="line-51"></span><span class="anchor" id="line-52"></span><span class="anchor" id="line-53"></span><span class="anchor" id="line-54"></span><pre><span class="anchor" id="ShortestPath-1.line-1"></span>Dijkstra(G,w,s):
<span class="anchor" id="ShortestPath-1.line-2"></span>  Set d[s] = 0 and set d[v] = +infinity for all v != s.
<span class="anchor" id="ShortestPath-1.line-3"></span>  Add all the vertices to Q.
<span class="anchor" id="ShortestPath-1.line-4"></span>  while Q is not empty:
<span class="anchor" id="ShortestPath-1.line-5"></span>    u = EXTRACT-MIN(Q)
<span class="anchor" id="ShortestPath-1.line-6"></span>    for each each uv:
<span class="anchor" id="ShortestPath-1.line-7"></span>      d[v] = min(d[v], d[u] + w(u,v))
<span class="anchor" id="ShortestPath-1.line-8"></span>  return d</pre><span class="anchor" id="line-55"></span><span class="anchor" id="line-56"></span><p class="line862">The running time of Dijkstra's algorithm depends on the implementation of Q.  The simplest implementation is just to keep around an array of all unprocessed vertices, and to carry out EXTRACT-MIN by performing a linear-time scan for one with the smallest d[u].  This gives a cost to EXTRACT-MIN of O(V), which is paid V times (once per vertex), for a total of O(V<sup>2</sup>) time.  The additional overhead of the algorithm takes O(V) time, except for the loop over outgoing edges from u, all of whose iterations together take O(E) time.  So the total cost is O(V<sup>2</sup> + E) = O(V<sup>2</sup>).  This can be improved for sparse graphs to O((V+E) log V) using a heap to represent Q (the extra log V on the E comes from the cost of moving elements within the heap when their distances drop), and it can be improved further to O(V log V + E) time using a <a href="/pinewiki/FibonacciHeap">FibonacciHeap</a>. <span class="anchor" id="line-57"></span><span class="anchor" id="line-58"></span><p class="line874">Why does Dijkstra's algorithm work?  Assuming there are no negative edge weights, there is a simple proof that d[u] = δ(s,u) for any v that leaves the priority queue.  The proof is by induction on the number of vertices that have left the queue, and requires a rather complicated induction hypothesis, which is that after each pass through the outer loop: <span class="anchor" id="line-59"></span><span class="anchor" id="line-60"></span><ul><li><p class="line862">If u is any vertex <em>not</em> in the queue, then d[u] = δ(s,u). <span class="anchor" id="line-61"></span></li><li>If u is any vertex not in the queue, and v is any vertex in the queue, then δ(s,u) ≤ δ(s,v) <span class="anchor" id="line-62"></span></li><li><p class="line862">If u is any vertex not in the queue, and v is any vertex in the queue, then d[v] ≤ δ(s,u) + w<sub>uv</sub> (where w<sub>uv</sub> is taken to be +∞ if uv is not an edge in the graph). <span class="anchor" id="line-63"></span><span class="anchor" id="line-64"></span></li></ul><p class="line867"><img alt="dijkstra.png" class="attachment" src="/pinewiki/ShortestPath?action=AttachFile&amp;do=get&amp;target=dijkstra.png" title="dijkstra.png" /> <span class="anchor" id="line-65"></span><span class="anchor" id="line-66"></span><p class="line874">This invariant looks ugly but what it says is actually pretty simple: after i steps, we have extracted the i closest vertices and correctly computed there distance, and for any other vertex v, d[v] is at most the length of the shortest path that consists only of non-queue vertices except for v.  If the first two parts of the invariant hold, the third is immediate from the relaxation step in the algorithm.  So we concentrate on proving the first two parts. <span class="anchor" id="line-67"></span><span class="anchor" id="line-68"></span><p class="line874">The base case is obtained by consider the state where s is the only vertex not in the queue; we easily have d[s] = 0 = δ(s,s) ≤ δ(s,v) for any vertex v in the queue. <span class="anchor" id="line-69"></span><span class="anchor" id="line-70"></span><p class="line862">For later u, we'll assume that the invariant holds at the beginning of the loop, and show that it also holds at the end.  For each v in the queue, d[v] is at most the length of the shortest s-v path that uses only vertices already processed.  We'll show that the smallest d[v] is in fact equal to δ(s,v) and is no greater than δ(s,v') for any v' in the queue.  Consider any vertex v that hasn't been processed yet.  Let t be the last vertex before v on some shortest s-v path that uses only previously processed vertices.  From the invariant we have that d[v] ≤ δ(s,t) + w<sub>tv</sub>.  Now consider two cases: <span class="anchor" id="line-71"></span><span class="anchor" id="line-72"></span><ol type="1"><li>The s-t-v path is a shortest path.  Then d[v] = δ(s,v) <span class="anchor" id="line-73"></span><span class="anchor" id="line-74"></span></li><li class="gap"><p class="line862">The s-t-v path is not a shortest path.  Then d[v] &gt; δ(s,v) and there is some shorter s-v path whose last vertex before v is t'.  But this shorter s-t'-v path can only exist if t' is still in the queue.  If we let q be the first vertex in some shortest s-t'-v path that is still in the queue, the s-q part of the path is a shortest path that uses only non-queue vertices.  So d[q] = δ(s,q) ≤ δ(s,v) &lt; d[v]. <span class="anchor" id="line-75"></span><span class="anchor" id="line-76"></span></li></ol><p class="line862">Let u be returned by EXTRACT-MIN.  If case 1 applies to u, part 1 of the invariant follows immediately.  Case 2 cannot occur because in this case there would be some q with d[q] &lt; d[u] and EXTRACT-MIN would have returned q instead.  We have thus proved that part 1 continues to hold. <span class="anchor" id="line-77"></span><span class="anchor" id="line-78"></span><p class="line874">For part 2, consider the two cases for some v≠u.  In case 1, δ(s,v) = d[v] ≥ d[u] = δ(s,u).  In case 2, δ(s,v) ≥ δ(s,q) = d[q] ≥ d[u] = δ(s,u).  Thus in either case δ(s,v) ≥ δ(s,u) and part 2 of the invariant holds. <span class="anchor" id="line-79"></span><span class="anchor" id="line-80"></span><p class="line874">Part 3 of the invariant is immediate from the code. <span class="anchor" id="line-81"></span><span class="anchor" id="line-82"></span><p class="line874">To complete the proof of correctness, observe that the first part of the induction hypothesis implies that all distances are correct when the queue is empty. <span class="anchor" id="line-83"></span><span class="anchor" id="line-84"></span><p class="line867">
<h2 id="Bellman-Ford">1.3. Bellman-Ford</h2>
<span class="anchor" id="line-85"></span><span class="anchor" id="line-86"></span><p class="line862">What if the graph contains negative edges?  Then Dijkstra's algorithm may fail in the usual pattern of misled <a href="/pinewiki/GreedyAlgorithms">GreedyAlgorithms</a>: the very last vertex v processed may have spectacularly negative edges leading to other vertices that would greatly reduce their distances, but they have already been processed and it's too late to take advantage of this amazing fact (more specifically, it's not too late for the immediate successors of v, but it's too late for any other vertex reachable from such a successor that is not itself a successor of v). <span class="anchor" id="line-87"></span><span class="anchor" id="line-88"></span><p class="line874">But we can still find shortest paths using the technique of relaxing every edge on a shortest path in sequence.  The Bellman-Ford algorithm does so under the assumption that there are no negative-weight cycles in the graph, in which case all shortest paths are simple---they contain no duplicate vertices---and thus have at most V-1 edges in them.  If we relax every edge, we are guaranteed to get the first edge of every shortest path; relaxing every edge again gets the second edge; and repeating this operation V-1 gets all edges in order. <span class="anchor" id="line-89"></span><span class="anchor" id="line-90"></span><p class="line867"><span class="anchor" id="line-91"></span><span class="anchor" id="line-92"></span><span class="anchor" id="line-93"></span><span class="anchor" id="line-94"></span><span class="anchor" id="line-95"></span><span class="anchor" id="line-96"></span><span class="anchor" id="line-97"></span><pre><span class="anchor" id="ShortestPath-1.line-1-1"></span>BellmanFord(G,s,w):
<span class="anchor" id="ShortestPath-1.line-2-1"></span>  Set d[s] = 0 and set d[v] = +infinity for all v != s.
<span class="anchor" id="ShortestPath-1.line-3-1"></span>  for i = 1 to V-1
<span class="anchor" id="ShortestPath-1.line-4-1"></span>    for each each edge uv in G:
<span class="anchor" id="ShortestPath-1.line-5-1"></span>      d[v] = min(d[v], d[u] + w(u,v))
<span class="anchor" id="ShortestPath-1.line-6-1"></span>  return d</pre><span class="anchor" id="line-98"></span><span class="anchor" id="line-99"></span><p class="line862">The running time of Bellman-Ford is O(VE), which is generally slower than even the simple O(V<sup>2</sup>) implementation of Dijkstra's algorithm; but it handles any edge weights, even negative ones. <span class="anchor" id="line-100"></span><span class="anchor" id="line-101"></span><p class="line862">What if a negative cycle exists?  In this case, there may be no shortest paths; any short path that reaches a vertex on the cycle can be shortened further by taking a few extra loops around it.  The Bellman-Ford algorithm can be used to detect such cycles by running the outer loop one more time---if d[v] drops for any v, then a negative cycle reachable from s exists.  The converse is also true; intuitively, this is because further reductions in distance can only propagate around the negative cycle if there is some edge that can be relaxed further in each state. <a href="/pinewiki/CormenEtAl">CormenEtAl</a> Section 24.1 contains a real proof. <span class="anchor" id="line-102"></span><span class="anchor" id="line-103"></span><p class="line867">
<h1 id="All-pairs_shortest_paths">2. All-pairs shortest paths</h1>
<span class="anchor" id="line-104"></span><span class="anchor" id="line-105"></span><p class="line862">There is a very simple <a href="/pinewiki/DynamicProgramming">DynamicProgramming</a> algorithm known as Floyd-Warshall that computes the distance between all V<sup>2</sup> pairs of vertices in Θ(V<sup>3</sup>) time.  This is no faster than running Dijkstra's algorithm V times, but it works even if some of the edge weights are negative. <span class="anchor" id="line-106"></span><span class="anchor" id="line-107"></span><p class="line862">Like any other dynamic programming algorithm, Floyd-Warshall starts with a recursive decomposition of the shortest-path problem.  The basic idea is to cut the path in half, by expanding d(i,j) as min<sub>k</sub> (d(i,k) + d(k,j)), but this requires considering n-2 intermediate vertices k and doesn't produce a smaller problem.  There are a couple of ways to make the d(i,k) on the right-hand side "smaller" than the d(i,j) on the left-hand side---for example, we could add a third parameter that is the length of the path and insist that the subpaths on the right-hand side be half the length of the path on the left-hand side---but most of these approaches still require looking at Θ(n) intermediate vertices.  The trick used by Floyd-Warshall is to make the third parameter be the largest vertex that can be used in the path.  This allows us to consider only one new intermediate vertex each time we increase this limit. <span class="anchor" id="line-108"></span><span class="anchor" id="line-109"></span><p class="line874">Define d(i,j,k) as the length of the shortest i-j path that uses only vertices with indices less than or equal to k.  Then <span class="anchor" id="line-110"></span><span class="anchor" id="line-111"></span><ul><li style="list-style-type:none"><p class="line862">d(i,j,0) = w<sub>ij</sub>, <span class="anchor" id="line-112"></span><span class="anchor" id="line-113"></span>d(i,j,k) = min(d(i,j,k-1), d(i,k,k-1) + d(k,j,k-1)). <span class="anchor" id="line-114"></span><span class="anchor" id="line-115"></span></li></ul><p class="line874">The reason this decomposition works (for any graph that does not contain a negative-weight cycle) is that every shortest i-j path with no vertex greater than k either includes k exactly once (the second case) or not at all.  The nice thing about this decomposition is that we only have to consider two values in the minimum, so we can evaluate d(i,j,k) in O(1) time if we already have d(i,k,k-1) and d(k,j,k-1) in our table.  The natural way to guarantee this is to build the table in order of increasing k.  We assume that the input is given as an array of edge weights with +∞ for missing edges; the algorithm's speed is not improved by using an adjacency-list representation of the graph. <span class="anchor" id="line-116"></span><span class="anchor" id="line-117"></span><p class="line867"><span class="anchor" id="line-118"></span><span class="anchor" id="line-119"></span><span class="anchor" id="line-120"></span><span class="anchor" id="line-121"></span><span class="anchor" id="line-122"></span><span class="anchor" id="line-123"></span><span class="anchor" id="line-124"></span><span class="anchor" id="line-125"></span><span class="anchor" id="line-126"></span><span class="anchor" id="line-127"></span><span class="anchor" id="line-128"></span><span class="anchor" id="line-129"></span><span class="anchor" id="line-130"></span><span class="anchor" id="line-131"></span><pre><span class="anchor" id="ShortestPath-1.line-1-2"></span>FloydWarshall(w):
<span class="anchor" id="ShortestPath-1.line-2-2"></span>  // initialize first plane of table
<span class="anchor" id="ShortestPath-1.line-3-2"></span>  for i = 1 to V do
<span class="anchor" id="ShortestPath-1.line-4-2"></span>    for j = 1 to V do
<span class="anchor" id="ShortestPath-1.line-5-2"></span>      d[i,j,0] = w[i,j]
<span class="anchor" id="ShortestPath-1.line-6-2"></span>  // fill in the rest
<span class="anchor" id="ShortestPath-1.line-7-1"></span>  for k = 1 to V do
<span class="anchor" id="ShortestPath-1.line-8-1"></span>    for i = 1 to V do
<span class="anchor" id="ShortestPath-1.line-9"></span>      for j = 1 to V do
<span class="anchor" id="ShortestPath-1.line-10"></span>        d[i,j,k] = min(d[i,j,k-1], d[i,k,k-1] + d[k,j,k-1])
<span class="anchor" id="ShortestPath-1.line-11"></span>  // pull out the distances where all vertices on the path are &lt;= n
<span class="anchor" id="ShortestPath-1.line-12"></span>  // (i.e. with no restrictions)
<span class="anchor" id="ShortestPath-1.line-13"></span>  return d' where d'[i,j] = d[i,j,k]</pre><span class="anchor" id="line-132"></span><span class="anchor" id="line-133"></span><p class="line862">The running time of this algorithm is easily seen to be Θ(V<sup>3</sup>).  As with Bellman-Ford, its output is guaranteed to be correct only if the graph does not contain a negative cycle; if the graph does contain a negative cycle, it can be detected by looking for vertices with d'[i,i] &lt; 0. <span class="anchor" id="line-134"></span><span class="anchor" id="line-135"></span><p class="line867">
<h1 id="Implementations">3. Implementations</h1>
<span class="anchor" id="line-136"></span><span class="anchor" id="line-137"></span><p class="line862">Below are <a href="/pinewiki/C">C</a> implementations of Bellman-Ford, Floyd-Warshall, and Dijkstra's algorithm (in a separate file).  The Dijkstra's algorithm implementation uses the generic priority queue from the <a class="nonexistent" href="/pinewiki/CS223/Assignments/HW08">CS223/Assignments/HW08</a> sample solutions.  Both files use an extended version of the <tt class="backtick">Graph</tt> structure from <a href="/pinewiki/C/Graphs">C/Graphs</a> that supports weights. <span class="anchor" id="line-138"></span><span class="anchor" id="line-139"></span><p class="line874">Here are the support files: <span class="anchor" id="line-140"></span><span class="anchor" id="line-141"></span><p class="line867"><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=graph.h" title="">graph.h</a> <span class="anchor" id="line-142"></span><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=graph.c" title="">graph.c</a> <span class="anchor" id="line-143"></span><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=pq.h" title="">pq.h</a> <span class="anchor" id="line-144"></span><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=pq.c" title="">pq.c</a> <span class="anchor" id="line-145"></span><span class="anchor" id="line-146"></span><p class="line862">Here is some test code and a <tt class="backtick">Makefile</tt>: <span class="anchor" id="line-147"></span><span class="anchor" id="line-148"></span><p class="line867"><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=test_shortest_path.c" title="">test_shortest_path.c</a> <span class="anchor" id="line-149"></span><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=Makefile" title="">Makefile</a> <span class="anchor" id="line-150"></span><span class="anchor" id="line-151"></span><p class="line874">And here are the actual implementations: <span class="anchor" id="line-152"></span><span class="anchor" id="line-153"></span><p class="line867"><span class="anchor" id="line-1-1"></span><div class="highlight text"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
function isnumbered(obj) {
  return obj.childNodes.length && obj.firstChild.childNodes.length && obj.firstChild.firstChild.className == 'LineNumber';
}
function nformat(num,chrs,add) {
  var nlen = Math.max(0,chrs-(''+num).length), res = '';
  while (nlen>0) { res += ' '; nlen-- }
  return res+num+add;
}
function addnumber(did, nstart, nstep) {
  var c = document.getElementById(did), l = c.firstChild, n = 1;
  if (!isnumbered(c)) {
    if (typeof nstart == 'undefined') nstart = 1;
    if (typeof nstep  == 'undefined') nstep = 1;
    var n = nstart;
    while (l != null) {
      if (l.tagName == 'SPAN') {
        var s = document.createElement('SPAN');
        var a = document.createElement('A');
        s.className = 'LineNumber';
        a.appendChild(document.createTextNode(nformat(n,4,'')));
        a.href = '#' + did + '_' + n;
        s.appendChild(a);
        s.appendChild(document.createTextNode(' '));
        n += nstep;
        if (l.childNodes.length) {
          l.insertBefore(s, l.firstChild);
        }
        else {
          l.appendChild(s);
        }
      }
      l = l.nextSibling;
    }
  }
  return false;
}
function remnumber(did) {
  var c = document.getElementById(did), l = c.firstChild;
  if (isnumbered(c)) {
    while (l != null) {
      if (l.tagName == 'SPAN' && l.firstChild.className == 'LineNumber') l.removeChild(l.firstChild);
      l = l.nextSibling;
    }
  }
  return false;
}
function togglenumber(did, nstart, nstep) {
  var c = document.getElementById(did);
  if (isnumbered(c)) {
    remnumber(did);
  } else {
    addnumber(did,nstart,nstep);
  }
  return false;
}
</script>

<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-907c881fb09dfc6f250f91118ff65e297158bc73\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script>
<pre dir="ltr" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_1">   1</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_1"></span><span class="anchor" id="line-1-2"></span><span class="Preprc">/* various algorithms for shortest paths */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_2">   2</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_2"></span><span class="anchor" id="line-2-1"></span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_3">   3</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_3"></span><span class="anchor" id="line-3-1"></span><span class="Preprc">#</span><span class="Preprc">define SHORTEST_PATH_NULL_PARENT (-1)</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_4">   4</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_4"></span><span class="anchor" id="line-4-1"></span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_5">   5</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_5"></span><span class="anchor" id="line-5-1"></span><span class="Comment">/* Computes distance of each node from starting node */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_6">   6</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_6"></span><span class="anchor" id="line-6-1"></span><span class="Comment">/* and stores results in dist (length n, allocated by the caller) */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_7">   7</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_7"></span><span class="anchor" id="line-7-1"></span><span class="Comment">/* unreachable nodes get distance MAXINT */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_8">   8</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_8"></span><span class="anchor" id="line-8-1"></span><span class="Comment">/* If parent argument is non-null, also stores parent pointers in parent */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_9">   9</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_9"></span><span class="anchor" id="line-9-1"></span><span class="Comment">/* Allows negative-weight edges and runs in O(nm) time. */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_10">  10</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_10"></span><span class="anchor" id="line-10-1"></span><span class="Comment">/* returns 1 if there is a negative cycle, 0 otherwise */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_11">  11</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_11"></span><span class="anchor" id="line-11-1"></span><span class="ResWord">int</span> <span class="ID">bellman_ford</span>(<span class="ID">Graph</span> <span class="ID">g</span>, <span class="ResWord">int</span> <span class="ID">source</span>, <span class="ResWord">int</span> *<span class="ID">dist</span>, <span class="ResWord">int</span> *<span class="ID">parent</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_12">  12</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_12"></span><span class="anchor" id="line-12-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_13">  13</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_13"></span><span class="anchor" id="line-13-1"></span><span class="Comment">/* computes all-pairs shortest paths using Floyd-Warshall given */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_14">  14</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_14"></span><span class="anchor" id="line-14-1"></span><span class="Comment">/* an adjacency matrix */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_15">  15</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_15"></span><span class="anchor" id="line-15-1"></span><span class="Comment">/* answer is returned in the provided matrix! */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_16">  16</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_16"></span><span class="anchor" id="line-16-1"></span><span class="Comment">/* assumes matrix is n pointers to rows of n ints each */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-907c881fb09dfc6f250f91118ff65e297158bc73_17">  17</a> </span><span class="LineAnchor" id="CA-907c881fb09dfc6f250f91118ff65e297158bc73_17"></span><span class="anchor" id="line-17-1"></span><span class="ResWord">void</span> <span class="ID">floyd_warshall</span>(<span class="ResWord">int</span> <span class="ID">n</span>, <span class="ResWord">int</span> **<span class="ID">matrix</span>);</span>
</pre></div></div><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=shortest_path.h" title="attachment:shortest_path.h">shortest_path.h</a> <span class="anchor" id="line-154"></span><span class="anchor" id="line-1-3"></span><div class="highlight text"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-96cd97e2612081476218a2fb64da252d35ab9e5e\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script>
<pre dir="ltr" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_1">   1</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_1"></span><span class="anchor" id="line-1-4"></span><span class="Preprc">#</span><span class="Preprc">include &lt;stdlib.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_2">   2</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_2"></span><span class="anchor" id="line-2-2"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include &lt;assert.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_3">   3</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_3"></span><span class="anchor" id="line-3-2"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include &lt;values.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_4">   4</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_4"></span><span class="anchor" id="line-4-2"></span><span class="Preprc"></span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_5">   5</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_5"></span><span class="anchor" id="line-5-2"></span><span class="Preprc">#</span><span class="Preprc">include "graph.h"</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_6">   6</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_6"></span><span class="anchor" id="line-6-2"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include "shortest_path.h"</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_7">   7</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_7"></span><span class="anchor" id="line-7-2"></span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_8">   8</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_8"></span><span class="anchor" id="line-8-2"></span><span class="Comment">/* data field for relax helper */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_9">   9</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_9"></span><span class="anchor" id="line-9-2"></span><span class="ResWord">struct</span> <span class="ID">relax_data</span> {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_10">  10</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_10"></span><span class="anchor" id="line-10-2"></span>    <span class="ResWord">int</span> <span class="ID">improved</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_11">  11</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_11"></span><span class="anchor" id="line-11-2"></span>    <span class="ResWord">int</span> *<span class="ID">dist</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_12">  12</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_12"></span><span class="anchor" id="line-12-2"></span>    <span class="ResWord">int</span> *<span class="ID">parent</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_13">  13</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_13"></span><span class="anchor" id="line-13-2"></span>};</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_14">  14</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_14"></span><span class="anchor" id="line-14-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_15">  15</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_15"></span><span class="anchor" id="line-15-2"></span><span class="ResWord">static</span> <span class="ResWord">void</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_16">  16</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_16"></span><span class="anchor" id="line-16-2"></span><span class="ID">relax</span>(<span class="ID">Graph</span> <span class="ID">g</span>, <span class="ResWord">int</span> <span class="ID">source</span>, <span class="ResWord">int</span> <span class="ID">sink</span>, <span class="ResWord">int</span> <span class="ID">weight</span>, <span class="ResWord">void</span> *<span class="ID">data</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_17">  17</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_17"></span><span class="anchor" id="line-17-2"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_18">  18</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_18"></span><span class="anchor" id="line-18-1"></span>    <span class="ResWord">int</span> <span class="ID">len</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_19">  19</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_19"></span><span class="anchor" id="line-19-1"></span>    <span class="ResWord">struct</span> <span class="ID">relax_data</span> *<span class="ID">d</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_20">  20</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_20"></span><span class="anchor" id="line-20-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_21">  21</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_21"></span><span class="anchor" id="line-21-1"></span>    <span class="ID">d</span> = <span class="ID">data</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_22">  22</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_22"></span><span class="anchor" id="line-22-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_23">  23</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_23"></span><span class="anchor" id="line-23-1"></span>    <span class="ResWord">if</span>(<span class="ID">d</span>-&gt;<span class="ID">dist</span>[<span class="ID">source</span>] &lt; <span class="ID">MAXINT</span> &amp;&amp; <span class="ID">weight</span> &lt; <span class="ID">MAXINT</span>) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_24">  24</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_24"></span><span class="anchor" id="line-24-1"></span>        <span class="ID">len</span> = <span class="ID">d</span>-&gt;<span class="ID">dist</span>[<span class="ID">source</span>] + <span class="ID">weight</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_25">  25</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_25"></span><span class="anchor" id="line-25-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_26">  26</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_26"></span><span class="anchor" id="line-26-1"></span>        <span class="ResWord">if</span>(<span class="ID">len</span> &lt; <span class="ID">d</span>-&gt;<span class="ID">dist</span>[<span class="ID">sink</span>]) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_27">  27</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_27"></span><span class="anchor" id="line-27-1"></span>            <span class="ID">d</span>-&gt;<span class="ID">dist</span>[<span class="ID">sink</span>] = <span class="ID">len</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_28">  28</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_28"></span><span class="anchor" id="line-28-1"></span>            <span class="ResWord">if</span>(<span class="ID">d</span>-&gt;<span class="ID">parent</span>) <span class="ID">d</span>-&gt;<span class="ID">parent</span>[<span class="ID">sink</span>] = <span class="ID">source</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_29">  29</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_29"></span><span class="anchor" id="line-29-1"></span>            <span class="ID">d</span>-&gt;<span class="ID">improved</span> = <span class="Number">1</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_30">  30</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_30"></span><span class="anchor" id="line-30-1"></span>        }</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_31">  31</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_31"></span><span class="anchor" id="line-31-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_32">  32</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_32"></span><span class="anchor" id="line-32-1"></span>}</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_33">  33</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_33"></span><span class="anchor" id="line-33-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_34">  34</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_34"></span><span class="anchor" id="line-34-1"></span><span class="Comment">/* returns 1 if there is a negative cycle */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_35">  35</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_35"></span><span class="anchor" id="line-35-1"></span><span class="ResWord">int</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_36">  36</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_36"></span><span class="anchor" id="line-36-1"></span><span class="ID">bellman_ford</span>(<span class="ID">Graph</span> <span class="ID">g</span>, <span class="ResWord">int</span> <span class="ID">source</span>, <span class="ResWord">int</span> *<span class="ID">dist</span>, <span class="ResWord">int</span> *<span class="ID">parent</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_37">  37</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_37"></span><span class="anchor" id="line-37-1"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_38">  38</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_38"></span><span class="anchor" id="line-38-1"></span>    <span class="ResWord">int</span> <span class="ID">round</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_39">  39</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_39"></span><span class="anchor" id="line-39-1"></span>    <span class="ResWord">int</span> <span class="ID">n</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_40">  40</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_40"></span><span class="anchor" id="line-40-1"></span>    <span class="ResWord">int</span> <span class="ID">i</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_41">  41</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_41"></span><span class="anchor" id="line-41-1"></span>    <span class="ResWord">struct</span> <span class="ID">relax_data</span> <span class="ID">d</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_42">  42</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_42"></span><span class="anchor" id="line-42-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_43">  43</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_43"></span><span class="anchor" id="line-43-1"></span>    <span class="ID">assert</span>(<span class="ID">dist</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_44">  44</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_44"></span><span class="anchor" id="line-44-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_45">  45</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_45"></span><span class="anchor" id="line-45-1"></span>    <span class="ID">d</span>.<span class="ID">dist</span> = <span class="ID">dist</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_46">  46</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_46"></span><span class="anchor" id="line-46-1"></span>    <span class="ID">d</span>.<span class="ID">parent</span> = <span class="ID">parent</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_47">  47</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_47"></span><span class="anchor" id="line-47-1"></span>    <span class="ID">d</span>.<span class="ID">improved</span> = <span class="Number">1</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_48">  48</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_48"></span><span class="anchor" id="line-48-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_49">  49</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_49"></span><span class="anchor" id="line-49-1"></span>    <span class="ID">n</span> = <span class="ID">graph_vertex_count</span>(<span class="ID">g</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_50">  50</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_50"></span><span class="anchor" id="line-50-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_51">  51</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_51"></span><span class="anchor" id="line-51-1"></span>    <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>; <span class="ID">i</span> &lt; <span class="ID">n</span>; <span class="ID">i</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_52">  52</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_52"></span><span class="anchor" id="line-52-1"></span>        <span class="ID">d</span>.<span class="ID">dist</span>[<span class="ID">i</span>] = <span class="ID">MAXINT</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_53">  53</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_53"></span><span class="anchor" id="line-53-1"></span>        <span class="ResWord">if</span>(<span class="ID">d</span>.<span class="ID">parent</span>) <span class="ID">d</span>.<span class="ID">parent</span>[<span class="ID">i</span>] = <span class="ID">SHORTEST_PATH_NULL_PARENT</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_54">  54</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_54"></span><span class="anchor" id="line-54-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_55">  55</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_55"></span><span class="anchor" id="line-55-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_56">  56</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_56"></span><span class="anchor" id="line-56-1"></span>    <span class="ID">d</span>.<span class="ID">dist</span>[<span class="ID">source</span>] = <span class="Number">0</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_57">  57</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_57"></span><span class="anchor" id="line-57-1"></span>    <span class="ID">d</span>.<span class="ID">parent</span>[<span class="ID">source</span>] = <span class="ID">source</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_58">  58</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_58"></span><span class="anchor" id="line-58-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_59">  59</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_59"></span><span class="anchor" id="line-59-1"></span>    <span class="ResWord">for</span>(<span class="ID">round</span> = <span class="Number">0</span>; <span class="ID">d</span>.<span class="ID">improved</span> &amp;&amp; <span class="ID">round</span> &lt; <span class="ID">n</span>; <span class="ID">round</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_60">  60</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_60"></span><span class="anchor" id="line-60-1"></span>        <span class="ID">d</span>.<span class="ID">improved</span> = <span class="Number">0</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_61">  61</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_61"></span><span class="anchor" id="line-61-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_62">  62</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_62"></span><span class="anchor" id="line-62-1"></span>        <span class="Comment">/* relax all edges */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_63">  63</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_63"></span><span class="anchor" id="line-63-1"></span>        <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>; <span class="ID">i</span> &lt; <span class="ID">n</span>; <span class="ID">i</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_64">  64</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_64"></span><span class="anchor" id="line-64-1"></span>            <span class="ID">graph_foreach_weighted</span>(<span class="ID">g</span>, <span class="ID">i</span>, <span class="ID">relax</span>, &amp;<span class="ID">d</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_65">  65</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_65"></span><span class="anchor" id="line-65-1"></span>        }</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_66">  66</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_66"></span><span class="anchor" id="line-66-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_67">  67</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_67"></span><span class="anchor" id="line-67-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_68">  68</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_68"></span><span class="anchor" id="line-68-1"></span>    <span class="ResWord">return</span> <span class="ID">d</span>.<span class="ID">improved</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_69">  69</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_69"></span><span class="anchor" id="line-69-1"></span>}</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_70">  70</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_70"></span><span class="anchor" id="line-70-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_71">  71</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_71"></span><span class="anchor" id="line-71-1"></span><span class="ResWord">void</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_72">  72</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_72"></span><span class="anchor" id="line-72-1"></span><span class="ID">floyd_warshall</span>(<span class="ResWord">int</span> <span class="ID">n</span>, <span class="ResWord">int</span> **<span class="ID">d</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_73">  73</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_73"></span><span class="anchor" id="line-73-1"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_74">  74</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_74"></span><span class="anchor" id="line-74-1"></span>    <span class="ResWord">int</span> <span class="ID">i</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_75">  75</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_75"></span><span class="anchor" id="line-75-1"></span>    <span class="ResWord">int</span> <span class="ID">j</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_76">  76</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_76"></span><span class="anchor" id="line-76-1"></span>    <span class="ResWord">int</span> <span class="ID">k</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_77">  77</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_77"></span><span class="anchor" id="line-77-1"></span>    <span class="ResWord">int</span> <span class="ID">newdist</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_78">  78</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_78"></span><span class="anchor" id="line-78-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_79">  79</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_79"></span><span class="anchor" id="line-79-1"></span>    <span class="Comment">/* The algorithm:</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_80">  80</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_80"></span><span class="anchor" id="line-80-1"></span><span class="Comment">     *</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_81">  81</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_81"></span><span class="anchor" id="line-81-1"></span><span class="Comment">     * d(i, j, k) = min distance from i to j with all intermediates &lt;= k</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_82">  82</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_82"></span><span class="anchor" id="line-82-1"></span><span class="Comment">     *</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_83">  83</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_83"></span><span class="anchor" id="line-83-1"></span><span class="Comment">     * d(i, j, k) = min(d(i, j, k-1), d(i, k, k-1) + d(k, j, k-1)</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_84">  84</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_84"></span><span class="anchor" id="line-84-1"></span><span class="Comment">     *</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_85">  85</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_85"></span><span class="anchor" id="line-85-1"></span><span class="Comment">     * We will allow shorter paths to sneak in to d(i, j, k) so that</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_86">  86</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_86"></span><span class="anchor" id="line-86-1"></span><span class="Comment">     * we don't have to store anything extra.</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_87">  87</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_87"></span><span class="anchor" id="line-87-1"></span><span class="Comment">     */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_88">  88</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_88"></span><span class="anchor" id="line-88-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_89">  89</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_89"></span><span class="anchor" id="line-89-1"></span>    <span class="Comment">/* initial matrix is essentially d(:,:,-1) */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_90">  90</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_90"></span><span class="anchor" id="line-90-1"></span>    <span class="Comment">/* within body of outermost loop we compute d(:,:,k) */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_91">  91</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_91"></span><span class="anchor" id="line-91-1"></span>    <span class="ResWord">for</span>(<span class="ID">k</span> = <span class="Number">0</span>; <span class="ID">k</span> &lt; <span class="ID">n</span>; <span class="ID">k</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_92">  92</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_92"></span><span class="anchor" id="line-92-1"></span>        <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>; <span class="ID">i</span> &lt; <span class="ID">n</span>; <span class="ID">i</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_93">  93</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_93"></span><span class="anchor" id="line-93-1"></span>            <span class="Comment">/* skip if we can't get to k */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_94">  94</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_94"></span><span class="anchor" id="line-94-1"></span>            <span class="ResWord">if</span>(<span class="ID">d</span>[<span class="ID">i</span>][<span class="ID">k</span>] == <span class="ID">MAXINT</span>) <span class="ResWord">continue</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_95">  95</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_95"></span><span class="anchor" id="line-95-1"></span>            <span class="ResWord">for</span>(<span class="ID">j</span> = <span class="Number">0</span>; <span class="ID">j</span> &lt; <span class="ID">n</span>; <span class="ID">j</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_96">  96</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_96"></span><span class="anchor" id="line-96-1"></span>                <span class="Comment">/* skip if we can't get from k */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_97">  97</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_97"></span><span class="anchor" id="line-97-1"></span>                <span class="ResWord">if</span>(<span class="ID">d</span>[<span class="ID">k</span>][<span class="ID">j</span>] == <span class="ID">MAXINT</span>) <span class="ResWord">continue</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_98">  98</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_98"></span><span class="anchor" id="line-98-1"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_99">  99</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_99"></span><span class="anchor" id="line-99-1"></span>                <span class="Comment">/* else */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_100"> 100</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_100"></span><span class="anchor" id="line-100-1"></span>                <span class="ID">newdist</span> = <span class="ID">d</span>[<span class="ID">i</span>][<span class="ID">k</span>] + <span class="ID">d</span>[<span class="ID">k</span>][<span class="ID">j</span>];</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_101"> 101</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_101"></span><span class="anchor" id="line-101-1"></span>                <span class="ResWord">if</span>(<span class="ID">newdist</span> &lt; <span class="ID">d</span>[<span class="ID">i</span>][<span class="ID">j</span>]) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_102"> 102</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_102"></span><span class="anchor" id="line-102-1"></span>                    <span class="ID">d</span>[<span class="ID">i</span>][<span class="ID">j</span>] = <span class="ID">newdist</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_103"> 103</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_103"></span><span class="anchor" id="line-103-1"></span>                }</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_104"> 104</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_104"></span><span class="anchor" id="line-104-1"></span>            }</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_105"> 105</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_105"></span><span class="anchor" id="line-105-1"></span>        }</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_106"> 106</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_106"></span><span class="anchor" id="line-106-1"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-96cd97e2612081476218a2fb64da252d35ab9e5e_107"> 107</a> </span><span class="LineAnchor" id="CA-96cd97e2612081476218a2fb64da252d35ab9e5e_107"></span><span class="anchor" id="line-107-1"></span>}</span>
</pre></div></div><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=shortest_path.c" title="attachment:shortest_path.c">shortest_path.c</a> <span class="anchor" id="line-155"></span><span class="anchor" id="line-1-5"></span><div class="highlight text"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script>
<pre dir="ltr" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_1">   1</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_1"></span><span class="anchor" id="line-1-6"></span><span class="Preprc">#</span><span class="Preprc">define DIJKSTRA_NULL_PARENT (-1)</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_2">   2</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_2"></span><span class="anchor" id="line-2-3"></span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_3">   3</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_3"></span><span class="anchor" id="line-3-3"></span><span class="Comment">/* Computes distance of each node from starting node */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_4">   4</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_4"></span><span class="anchor" id="line-4-3"></span><span class="Comment">/* and stores results in dist (length n, allocated by the caller) */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_5">   5</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_5"></span><span class="anchor" id="line-5-3"></span><span class="Comment">/* unreachable nodes get distance MAXINT */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_6">   6</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_6"></span><span class="anchor" id="line-6-3"></span><span class="Comment">/* If parent argument is non-null, also stores parent pointers in parent */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_7">   7</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_7"></span><span class="anchor" id="line-7-3"></span><span class="Comment">/* Assumes no negative-weight edges */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_8">   8</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_8"></span><span class="anchor" id="line-8-3"></span><span class="Comment">/* Runs in O(n + m log m) time. */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_9">   9</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_9"></span><span class="anchor" id="line-9-3"></span><span class="Comment">/* Note: uses pq structure from pq.c */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_10">  10</a> </span><span class="LineAnchor" id="CA-5e62a1ae2acb76eafb7de7ca9b667a98a5102bd6_10"></span><span class="anchor" id="line-10-3"></span><span class="ResWord">void</span> <span class="ID">dijkstra</span>(<span class="ID">Graph</span> <span class="ID">g</span>, <span class="ResWord">int</span> <span class="ID">source</span>, <span class="ResWord">int</span> *<span class="ID">dist</span>, <span class="ResWord">int</span> *<span class="ID">parent</span>);</span>
</pre></div></div><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=dijkstra.h" title="attachment:dijkstra.h">dijkstra.h</a> <span class="anchor" id="line-156"></span><span class="anchor" id="line-1-7"></span><div class="highlight text"><div class="codearea" dir="ltr" lang="en">
<script type="text/javascript">
document.write('<a href="#" onclick="return togglenumber(\'CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e\', 1, 1);" \
                class="codenumbers">Toggle line numbers<\/a>');
</script>
<pre dir="ltr" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e" lang="en"><span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_1">   1</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_1"></span><span class="anchor" id="line-1-8"></span><span class="Preprc">#</span><span class="Preprc">include &lt;stdlib.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_2">   2</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_2"></span><span class="anchor" id="line-2-4"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include &lt;assert.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_3">   3</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_3"></span><span class="anchor" id="line-3-4"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include &lt;values.h&gt;</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_4">   4</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_4"></span><span class="anchor" id="line-4-4"></span><span class="Preprc"></span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_5">   5</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_5"></span><span class="anchor" id="line-5-4"></span><span class="Preprc">#</span><span class="Preprc">include "graph.h"</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_6">   6</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_6"></span><span class="anchor" id="line-6-4"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include "pq.h"</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_7">   7</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_7"></span><span class="anchor" id="line-7-4"></span><span class="Preprc"></span><span class="Preprc">#</span><span class="Preprc">include "dijkstra.h"</span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_8">   8</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_8"></span><span class="anchor" id="line-8-4"></span><span class="Preprc"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_9">   9</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_9"></span><span class="anchor" id="line-9-4"></span><span class="Comment">/* internal edge representation for dijkstra */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_10">  10</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_10"></span><span class="anchor" id="line-10-4"></span><span class="ResWord">struct</span> <span class="ID">pq_elt</span> {</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_11">  11</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_11"></span><span class="anchor" id="line-11-3"></span>    <span class="ResWord">int</span> <span class="ID">d</span>;      <span class="Comment">/* distance to v */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_12">  12</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_12"></span><span class="anchor" id="line-12-3"></span>    <span class="ResWord">int</span> <span class="ID">u</span>;      <span class="Comment">/* source */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_13">  13</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_13"></span><span class="anchor" id="line-13-3"></span>    <span class="ResWord">int</span> <span class="ID">v</span>;      <span class="Comment">/* sink */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_14">  14</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_14"></span><span class="anchor" id="line-14-3"></span>};</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_15">  15</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_15"></span><span class="anchor" id="line-15-3"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_16">  16</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_16"></span><span class="anchor" id="line-16-3"></span><span class="ResWord">static</span> <span class="ResWord">int</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_17">  17</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_17"></span><span class="anchor" id="line-17-3"></span><span class="ID">pq_elt_cmp</span>(<span class="ResWord">const</span> <span class="ResWord">void</span> *<span class="ID">a</span>, <span class="ResWord">const</span> <span class="ResWord">void</span> *<span class="ID">b</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_18">  18</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_18"></span><span class="anchor" id="line-18-2"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_19">  19</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_19"></span><span class="anchor" id="line-19-2"></span>    <span class="ResWord">return</span> ((<span class="ResWord">const</span> <span class="ResWord">struct</span> <span class="ID">pq_elt</span> *) <span class="ID">a</span>)-&gt;<span class="ID">d</span> - ((<span class="ResWord">const</span> <span class="ResWord">struct</span> <span class="ID">pq_elt</span> *) <span class="ID">b</span>)-&gt;<span class="ID">d</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_20">  20</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_20"></span><span class="anchor" id="line-20-2"></span>}</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_21">  21</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_21"></span><span class="anchor" id="line-21-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_22">  22</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_22"></span><span class="anchor" id="line-22-2"></span><span class="ResWord">struct</span> <span class="ID">push_data</span> {</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_23">  23</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_23"></span><span class="anchor" id="line-23-2"></span>    <span class="ID">PQ</span> <span class="ID">pq</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_24">  24</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_24"></span><span class="anchor" id="line-24-2"></span>    <span class="ResWord">int</span> *<span class="ID">dist</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_25">  25</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_25"></span><span class="anchor" id="line-25-2"></span>};</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_26">  26</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_26"></span><span class="anchor" id="line-26-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_27">  27</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_27"></span><span class="anchor" id="line-27-2"></span><span class="ResWord">static</span> <span class="ResWord">void</span> <span class="ID">push</span>(<span class="ID">Graph</span> <span class="ID">g</span>, <span class="ResWord">int</span> <span class="ID">u</span>, <span class="ResWord">int</span> <span class="ID">v</span>, <span class="ResWord">int</span> <span class="ID">wt</span>, <span class="ResWord">void</span> *<span class="ID">data</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_28">  28</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_28"></span><span class="anchor" id="line-28-2"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_29">  29</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_29"></span><span class="anchor" id="line-29-2"></span>    <span class="ResWord">struct</span> <span class="ID">push_data</span> *<span class="ID">d</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_30">  30</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_30"></span><span class="anchor" id="line-30-2"></span>    <span class="ResWord">struct</span> <span class="ID">pq_elt</span> <span class="ID">e</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_31">  31</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_31"></span><span class="anchor" id="line-31-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_32">  32</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_32"></span><span class="anchor" id="line-32-2"></span>    <span class="ID">d</span> = <span class="ID">data</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_33">  33</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_33"></span><span class="anchor" id="line-33-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_34">  34</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_34"></span><span class="anchor" id="line-34-2"></span>    <span class="ID">e</span>.<span class="ID">d</span> = <span class="ID">d</span>-&gt;<span class="ID">dist</span>[<span class="ID">u</span>] + <span class="ID">wt</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_35">  35</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_35"></span><span class="anchor" id="line-35-2"></span>    <span class="ID">e</span>.<span class="ID">u</span> = <span class="ID">u</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_36">  36</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_36"></span><span class="anchor" id="line-36-2"></span>    <span class="ID">e</span>.<span class="ID">v</span> = <span class="ID">v</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_37">  37</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_37"></span><span class="anchor" id="line-37-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_38">  38</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_38"></span><span class="anchor" id="line-38-2"></span>    <span class="ID">pq_insert</span>(<span class="ID">d</span>-&gt;<span class="ID">pq</span>, &amp;<span class="ID">e</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_39">  39</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_39"></span><span class="anchor" id="line-39-2"></span>}</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_40">  40</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_40"></span><span class="anchor" id="line-40-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_41">  41</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_41"></span><span class="anchor" id="line-41-2"></span><span class="ResWord">void</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_42">  42</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_42"></span><span class="anchor" id="line-42-2"></span><span class="ID">dijkstra</span>(<span class="ID">Graph</span> <span class="ID">g</span>, <span class="ResWord">int</span> <span class="ID">source</span>, <span class="ResWord">int</span> *<span class="ID">dist</span>, <span class="ResWord">int</span> *<span class="ID">parent</span>)</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_43">  43</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_43"></span><span class="anchor" id="line-43-2"></span>{</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_44">  44</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_44"></span><span class="anchor" id="line-44-2"></span>    <span class="ResWord">struct</span> <span class="ID">push_data</span> <span class="ID">data</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_45">  45</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_45"></span><span class="anchor" id="line-45-2"></span>    <span class="ResWord">struct</span> <span class="ID">pq_elt</span> <span class="ID">e</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_46">  46</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_46"></span><span class="anchor" id="line-46-2"></span>    <span class="ResWord">int</span> <span class="ID">n</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_47">  47</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_47"></span><span class="anchor" id="line-47-2"></span>    <span class="ResWord">int</span> <span class="ID">i</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_48">  48</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_48"></span><span class="anchor" id="line-48-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_49">  49</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_49"></span><span class="anchor" id="line-49-2"></span>    <span class="ID">assert</span>(<span class="ID">dist</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_50">  50</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_50"></span><span class="anchor" id="line-50-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_51">  51</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_51"></span><span class="anchor" id="line-51-2"></span>    <span class="ID">data</span>.<span class="ID">dist</span> = <span class="ID">dist</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_52">  52</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_52"></span><span class="anchor" id="line-52-2"></span>    <span class="ID">data</span>.<span class="ID">pq</span> = <span class="ID">pq_create</span>(<span class="ResWord">sizeof</span>(<span class="ResWord">struct</span> <span class="ID">pq_elt</span>), <span class="ID">pq_elt_cmp</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_53">  53</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_53"></span><span class="anchor" id="line-53-2"></span>    <span class="ID">assert</span>(<span class="ID">data</span>.<span class="ID">pq</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_54">  54</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_54"></span><span class="anchor" id="line-54-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_55">  55</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_55"></span><span class="anchor" id="line-55-2"></span>    <span class="ID">n</span> = <span class="ID">graph_vertex_count</span>(<span class="ID">g</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_56">  56</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_56"></span><span class="anchor" id="line-56-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_57">  57</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_57"></span><span class="anchor" id="line-57-2"></span>    <span class="Comment">/* set up dist and parent arrays */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_58">  58</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_58"></span><span class="anchor" id="line-58-2"></span>    <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>; <span class="ID">i</span> &lt; <span class="ID">n</span>; <span class="ID">i</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_59">  59</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_59"></span><span class="anchor" id="line-59-2"></span>        <span class="ID">dist</span>[<span class="ID">i</span>] = <span class="ID">MAXINT</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_60">  60</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_60"></span><span class="anchor" id="line-60-2"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_61">  61</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_61"></span><span class="anchor" id="line-61-2"></span>        </span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_62">  62</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_62"></span><span class="anchor" id="line-62-2"></span>    <span class="ResWord">if</span>(<span class="ID">parent</span>) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_63">  63</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_63"></span><span class="anchor" id="line-63-2"></span>        <span class="ResWord">for</span>(<span class="ID">i</span> = <span class="Number">0</span>; <span class="ID">i</span> &lt; <span class="ID">n</span>; <span class="ID">i</span>++) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_64">  64</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_64"></span><span class="anchor" id="line-64-2"></span>            <span class="ID">parent</span>[<span class="ID">i</span>] = <span class="ID">DIJKSTRA_NULL_PARENT</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_65">  65</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_65"></span><span class="anchor" id="line-65-2"></span>        }</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_66">  66</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_66"></span><span class="anchor" id="line-66-2"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_67">  67</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_67"></span><span class="anchor" id="line-67-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_68">  68</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_68"></span><span class="anchor" id="line-68-2"></span>    <span class="Comment">/* push (source, source, 0) */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_69">  69</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_69"></span><span class="anchor" id="line-69-2"></span>    <span class="Comment">/* this will get things started with parent[source] == source */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_70">  70</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_70"></span><span class="anchor" id="line-70-2"></span>    <span class="Comment">/* and dist[source] == 0 */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_71">  71</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_71"></span><span class="anchor" id="line-71-2"></span>    <span class="ID">push</span>(<span class="ID">g</span>, <span class="ID">source</span>, <span class="ID">source</span>, -<span class="ID">MAXINT</span>, &amp;<span class="ID">data</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_72">  72</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_72"></span><span class="anchor" id="line-72-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_73">  73</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_73"></span><span class="anchor" id="line-73-2"></span>    <span class="ResWord">while</span>(!<span class="ID">pq_is_empty</span>(<span class="ID">data</span>.<span class="ID">pq</span>)) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_74">  74</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_74"></span><span class="anchor" id="line-74-2"></span>        <span class="Comment">/* pull the min value out */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_75">  75</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_75"></span><span class="anchor" id="line-75-2"></span>        <span class="ID">pq_delete_min</span>(<span class="ID">data</span>.<span class="ID">pq</span>, &amp;<span class="ID">e</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_76">  76</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_76"></span><span class="anchor" id="line-76-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_77">  77</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_77"></span><span class="anchor" id="line-77-2"></span>        <span class="Comment">/* did we reach the sink already? */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_78">  78</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_78"></span><span class="anchor" id="line-78-2"></span>        <span class="ResWord">if</span>(<span class="ID">dist</span>[<span class="ID">e</span>.<span class="ID">v</span>] == <span class="ID">MAXINT</span>) {</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_79">  79</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_79"></span><span class="anchor" id="line-79-2"></span>            <span class="Comment">/* no, it's a new edge */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_80">  80</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_80"></span><span class="anchor" id="line-80-2"></span>            <span class="ID">dist</span>[<span class="ID">e</span>.<span class="ID">v</span>] = <span class="ID">e</span>.<span class="ID">d</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_81">  81</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_81"></span><span class="anchor" id="line-81-2"></span>            <span class="ResWord">if</span>(<span class="ID">parent</span>) <span class="ID">parent</span>[<span class="ID">e</span>.<span class="ID">v</span>] = <span class="ID">e</span>.<span class="ID">u</span>;</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_82">  82</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_82"></span><span class="anchor" id="line-82-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_83">  83</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_83"></span><span class="anchor" id="line-83-2"></span>            <span class="Comment">/* throw in the outgoing edges */</span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_84">  84</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_84"></span><span class="anchor" id="line-84-2"></span>            <span class="ID">graph_foreach_weighted</span>(<span class="ID">g</span>, <span class="ID">e</span>.<span class="ID">v</span>, <span class="ID">push</span>, &amp;<span class="ID">data</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_85">  85</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_85"></span><span class="anchor" id="line-85-2"></span>        }</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_86">  86</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_86"></span><span class="anchor" id="line-86-2"></span>    }</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_87">  87</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_87"></span><span class="anchor" id="line-87-2"></span></span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_88">  88</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_88"></span><span class="anchor" id="line-88-2"></span>    <span class="ID">pq_destroy</span>(<span class="ID">data</span>.<span class="ID">pq</span>);</span>
<span class="line"><span class="LineNumber"><a href="#CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_89">  89</a> </span><span class="LineAnchor" id="CA-adc86f92304cfa540454872c3b9d6d8f405a7a6e_89"></span><span class="anchor" id="line-89-2"></span>}</span>
</pre></div></div><a class="attachment" href="/pinewiki/ShortestPath?action=AttachFile&amp;do=view&amp;target=dijkstra.c" title="attachment:dijkstra.c">dijkstra.c</a> <span class="anchor" id="line-157"></span><span class="anchor" id="line-158"></span><p class="line867"><hr /><p class="line874"> <span class="anchor" id="line-159"></span><a href="/pinewiki/CategoryAlgorithmNotes">CategoryAlgorithmNotes</a> <a href="/pinewiki/CategoryProgrammingNotes">CategoryProgrammingNotes</a> <span class="anchor" id="line-160"></span><span class="anchor" id="bottom"></span></div><p id="pageinfo" class="info" lang="en" dir="ltr">ShortestPath  (last edited 2012-01-19 16:43:21 by <span title="JamesAspnes @ pine.cs.yale.edu[128.36.229.174]"><a href="/pinewiki/JamesAspnes" title="JamesAspnes @ pine.cs.yale.edu[128.36.229.174]">JamesAspnes</a></span>)</p>

<div id="pagebottom"></div>
</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-91687-4");
pageTracker._trackPageview();
</script>

<div id="footer">
<ul class="editbar"><li><span class="disabled">Immutable Page</span></li><li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onClick="toggleComments();return false;">Comments</a></li><li><a class="nbinfo" href="/pinewiki/ShortestPath?action=info" rel="nofollow">Info</a></li><li><a class="nbattachments" href="/pinewiki/ShortestPath?action=AttachFile" rel="nofollow">Attachments</a></li><li>
<form class="actionsmenu" method="GET" action="/pinewiki/ShortestPath">
<div>
    <label>More Actions:</label>
    <select name="action"
        onchange="if ((this.selectedIndex != 0) &&
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="raw">Raw Text</option>
<option value="print">Print View</option>
<option value="refresh">Delete Cache</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SpellCheck">Check Spelling</option>
<option value="LikePages">Like Pages</option>
<option value="LocalSiteMap">Local Site Map</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="RenamePage" disabled class="disabled">Rename Page</option>
<option value="DeletePage" disabled class="disabled">Delete Page</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Subscribe User</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Remove Spam</option>
<option value="show" disabled class="disabled">Revert to this revision</option>
<option value="PackagePages">Package Pages</option>
<option value="SyncPages">Sync Pages</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="Load">Load</option>
<option value="Save">Save</option>
<option value="SlideShow">SlideShow</option>
    </select>
    <input type="submit" value="Do">
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script>
</form>
</li></ul>

<ul id="credits">
<li><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/3.0/80x15.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.<br /></li><li><a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a></li><li><a href="http://moinmo.in/Python" title="MoinMoin is written in Python.">Python Powered</a></li><li><a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a></li><li><a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a></li>
</ul>


</div>
</body>
</html>

